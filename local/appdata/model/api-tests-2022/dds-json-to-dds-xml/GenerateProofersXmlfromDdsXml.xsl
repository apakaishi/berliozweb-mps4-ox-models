<?xml version="1.0" encoding="UTF-8"?>
<!-- 
   Generate PSML from intermediate file generated by GenerateProofersXmlfromDdsXml.xslt from DDS XML.
   
   Version: Oct 24 16:38
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
                exclude-result-prefixes="xs xd" version="2.0">

    <xsl:param name="schedule-code" />
    <xsl:param name="folder" />
    <xsl:param name="edition-type" />

    <xsl:variable name="base" select="replace(replace(base-uri(),'file:', 'file://'), 'data-processed/grouped-proofer.xml', '')" />
    <xsl:variable name="output" select="concat($base,$folder,'/')" />
    <xsl:variable name="sch-path" select="concat($output,'Schedule-',$schedule-code,'/')" />
    <xsl:variable name="edition-path" select="concat($sch-path,'Edition-',$edition-type,'/')" />

    <xsl:param name="DEBUG" select="'true'"/>

    <xsl:template match="proof-text">

        <xsl:apply-templates/>

    </xsl:template>

    <xsl:template match="Item">
        <xsl:variable name="program_code" select="@program_code" />
        <xsl:variable name="program-path" select="concat($edition-path,'',$program_code,'/')" />

        <xsl:apply-templates select="* except H1">
            <xsl:with-param name="path"><xsl:value-of select="$program-path" /></xsl:with-param>
        </xsl:apply-templates>
    </xsl:template>



    <xsl:template match="ItemRestrictionRltd">
        <xsl:param name="path" />
        <xsl:variable name="current-item"  select="ancestor::Item[1]" />
        <xsl:variable name="schedule-code" select="$current-item/../@schedule_code"/>
        <xsl:variable name="revision-number" select="$current-item/../@revision_number"/>
        <xsl:variable name="program-code" select="$current-item/@program_code"/>
        <xsl:variable name="pbs-code" select="$current-item/@pbs_code"/>
        <xsl:variable name="heading" select="$current-item/section/H1"/>
        
        <xsl:result-document
            href="{concat($path, 'Items/', $pbs-code, '/restrictions/', @res_code, '.psml' )}">
            <document level="portable">
                <xsl:attribute name="date" select="current-dateTime()"/>
                
                <!-- Perform checksum extractions -->
                <xsl:variable name="raw-li-chars1" select="upper-case(translate(normalize-space(string-join(
                    RestrictionText/div[2]//HTML_TEXT//text()[not(parent::H3)])), 
                            ' ,.;:', '')) "/>
                <xsl:variable name="checksum1" select="sum(string-to-codepoints($raw-li-chars1))"/>  
                
                
                <xsl:variable name="raw-li-chars2" select="upper-case(translate(normalize-space( string-join(
                    RestrictionText/div[3]//HTML_TEXT//text()[not(parent::H3)])), 
                    ' ,.;:', '')) "/>
                <xsl:variable name="checksum2" select="sum(string-to-codepoints($raw-li-chars2))"/>  
                
                <xsl:variable name="raw-li-chars3" select="upper-case(translate(normalize-space(
                    replace(replace(replace(string-join(
                    RestrictionText/div[4]//HTML_TEXT//text()[not(parent::H3)]),
                    'Clinical criteria', ''), 'Treatment criteria', ''), 'Population criteria', '')), 
                    ' ,.;:', '')) "/>
                <xsl:variable name="checksum3" select="sum(string-to-codepoints($raw-li-chars3))"/>  
                
                
                <xsl:variable name="raw-li-chars4" select="upper-case(translate(normalize-space( string-join(
                    RestrictionText/div[5]//HTML_TEXT//text()[not(parent::H3)])), 
                    ' ,.;:', '')) "/>
                <xsl:variable name="checksum4" select="sum(string-to-codepoints($raw-li-chars4))"/>  
                 
                <xsl:if test="$DEBUG = 'true'">
                    <xsl:if
                        test="ends-with(@res_code, '_R') and ($checksum1 &gt; $checksum2 or $checksum2 != $checksum3 or $checksum2 != $checksum4)">
                        <xsl:message>Checksum error: <xsl:value-of select="$pbs-code"/> -
                            <xsl:value-of select="@res_code"/> - <xsl:value-of
                            select="concat($checksum1, ':', $checksum2, ':', $checksum3, ':', $checksum4)"
                            /></xsl:message>
                        <xsl:if test="$checksum2 != $checksum3">
                            <xsl:message>
                                <xsl:if test="$checksum3 != $checksum4">* </xsl:if>
                                <xsl:value-of select="$raw-li-chars2"/>
                            </xsl:message>
                                <xsl:message>
                                    <xsl:if test="$checksum3 != $checksum4">* </xsl:if>
                                <xsl:value-of select="$raw-li-chars3"/>
                            </xsl:message>
                        </xsl:if>
                    </xsl:if>
                </xsl:if>
                
                <section id="1">
                    <title>
                        <xsl:value-of select="$heading"/>
                    </title>
                    <fragment id="1">
                        <para>[<xsl:value-of  select=" @res_code"/> - checksums:
                            <xsl:value-of select="concat( $checksum1, ':',  $checksum2, ':', $checksum3, ':', $checksum4)"/>]</para>
                            
                    </fragment>
                    <xsl:apply-templates />
                </section>
                <xsl:text>&#x0A;</xsl:text> 
            </document>
        </xsl:result-document>
    </xsl:template>

    <xsl:template match="section">
        <xsl:param name="path" />
        <xsl:apply-templates>
            <xsl:with-param name="path"><xsl:value-of select="$path" /></xsl:with-param>
        </xsl:apply-templates>
    </xsl:template>

    <xsl:template match="div">
        <fragment id="{(count(parent::*/parent::*/preceding-sibling::*) * 10) +
            (count(parent::*/preceding-sibling::*) * 10) + count(preceding-sibling::div) +1 }">
            <xsl:apply-templates/>
        </fragment>

    </xsl:template>

    <xsl:template match="block | BLOCK">
        <xsl:copy>
            <xsl:sequence select="@*"/>

            <xsl:apply-templates/>
        </xsl:copy>
    </xsl:template>


    <xsl:template match="HTML_TEXT">
        <xsl:apply-templates/>
    </xsl:template>


    <xsl:template match="(P | p)[@align = 'justify']">
        <block label="justify">
            <para>
                <xsl:apply-templates/>
            </para>
        </block>
    </xsl:template>

    <xsl:template match="P | p">
        <para>
            <xsl:apply-templates/>
        </para>
    </xsl:template>
    <xsl:template match="B | b">
        <bold>
            <xsl:apply-templates/>
        </bold>
    </xsl:template>
    <xsl:template match="I | i">
        <italic>
            <xsl:apply-templates/>
        </italic>
    </xsl:template>
    <xsl:template match="H1">
        <heading level="1">
            <xsl:apply-templates/>
        </heading>
    </xsl:template>
    <xsl:template match="H2">
        <heading level="2">
            <xsl:apply-templates/>
        </heading>
    </xsl:template>
    <xsl:template match="H3">
        <heading level="3">
            <xsl:apply-templates/>
        </heading>
    </xsl:template>
    <xsl:template match="UL | ul">
        <list>
            <xsl:apply-templates/>
        </list>
    </xsl:template>
    <xsl:template match="OL | ol">
        <nlist>
            <xsl:apply-templates/>
        </nlist>
    </xsl:template>
    <xsl:template match="LI | li">
        <item>
            <xsl:apply-templates/>
        </item>
    </xsl:template>
    <xsl:template match="SUP | sup">
        <sup>
            <xsl:apply-templates/>
        </sup>
    </xsl:template>
    <xsl:template match="U | u">
        <underline>
            <xsl:apply-templates/>
        </underline>
    </xsl:template>



</xsl:stylesheet>
